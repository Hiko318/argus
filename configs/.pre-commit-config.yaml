# Pre-commit hooks configuration for Foresight SAR System
# Install with: pre-commit install
# Run manually: pre-commit run --all-files

repos:
  # Code formatting
  - repo: https://github.com/psf/black
    rev: 23.11.0
    hooks:
      - id: black
        language_version: python3
        args: [--line-length=88]

  # Import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: [--profile=black, --line-length=88]

  # Linting
  - repo: https://github.com/pycqa/flake8
    rev: 6.1.0
    hooks:
      - id: flake8
        args: [--max-line-length=88, --extend-ignore=E203,W503]
        additional_dependencies:
          - flake8-docstrings
          - flake8-import-order
          - flake8-bugbear

  # Security scanning
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-r, --skip=B101,B601]
        exclude: ^tests/

  # Type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.7.1
    hooks:
      - id: mypy
        additional_dependencies:
          - types-requests
          - types-PyYAML
          - types-pillow
        args: [--ignore-missing-imports, --no-strict-optional]

  # General code quality
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
        args: [--allow-multiple-documents]
      - id: check-json
      - id: check-toml
      - id: check-xml
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-symlinks
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      - id: check-docstring-first
      - id: debug-statements
      - id: name-tests-test
        args: [--pytest-test-first]
      - id: requirements-txt-fixer
      - id: fix-byte-order-marker
      - id: mixed-line-ending
        args: [--fix=lf]

  # Secrets detection
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: ['--baseline', '.secrets.baseline']
        exclude: .*\.lock$|^tests/.*$

  # Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        args: [--ignore, DL3008, --ignore, DL3009]

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        args: [-e, SC1091, -e, SC2034]

  # YAML formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.1.0
    hooks:
      - id: prettier
        types_or: [yaml, markdown, json]
        exclude: ^(.*\.md|.*\.json)$

  # Python dependency security
  - repo: https://github.com/Lucas-C/pre-commit-hooks-safety
    rev: v1.3.2
    hooks:
      - id: python-safety-dependencies-check
        args: [--ignore=51668]  # Ignore specific CVE if needed

  # License headers
  - repo: https://github.com/Lucas-C/pre-commit-hooks
    rev: v1.5.4
    hooks:
      - id: insert-license
        files: \.py$
        args:
          - --license-filepath
          - LICENSE_HEADER.txt
          - --comment-style
          - "#"
        exclude: ^(tests/|docs/|scripts/)

  # Commit message formatting
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.13.0
    hooks:
      - id: commitizen
        stages: [commit-msg]

  # Python docstring formatting
  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        args: [--convention=google]
        exclude: ^(tests/|migrations/)

  # Remove unused imports
  - repo: https://github.com/pycqa/autoflake
    rev: v2.2.1
    hooks:
      - id: autoflake
        args:
          - --in-place
          - --remove-all-unused-imports
          - --remove-unused-variables
          - --remove-duplicate-keys
          - --ignore-init-module-imports

  # Upgrade Python syntax
  - repo: https://github.com/asottile/pyupgrade
    rev: v3.15.0
    hooks:
      - id: pyupgrade
        args: [--py38-plus]

  # Check for large files
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: check-added-large-files
        args: [--maxkb=10240]  # 10MB limit

  # Local hooks for project-specific checks
  - repo: local
    hooks:
      # Run tests before commit
      - id: pytest-check
        name: pytest-check
        entry: pytest
        language: system
        args: [tests/unit/, -x, --tb=short]
        pass_filenames: false
        stages: [pre-push]

      # Check model files are not committed
      - id: check-model-files
        name: check-model-files
        entry: bash -c 'if find . -name "*.pt" -o -name "*.pth" -o -name "*.onnx" -o -name "*.trt" | grep -v models/; then echo "Model files should be in models/ directory or use Git LFS"; exit 1; fi'
        language: system
        pass_filenames: false

      # Check for hardcoded secrets
      - id: check-hardcoded-secrets
        name: check-hardcoded-secrets
        entry: bash -c 'if grep -r "password\|secret\|key\|token" --include="*.py" --exclude-dir=tests . | grep -v "# nosec"; then echo "Potential hardcoded secrets found"; exit 1; fi'
        language: system
        pass_filenames: false

      # Validate configuration files
      - id: validate-config
        name: validate-config
        entry: python -c "import yaml; import sys; [yaml.safe_load(open(f)) for f in sys.argv[1:] if f.endswith('.yaml') or f.endswith('.yml')]"
        language: system
        files: \.(yaml|yml)$

      # Check Docker files
      - id: check-dockerfile
        name: check-dockerfile
        entry: bash -c 'for f in $(find . -name "Dockerfile*"); do if ! grep -q "USER" "$f"; then echo "Dockerfile $f should specify a non-root USER"; exit 1; fi; done'
        language: system
        files: Dockerfile.*
        pass_filenames: false

      # Generate SBOM on changes
      - id: generate-sbom
        name: generate-sbom
        entry: python tools/generate_sbom.py --output sbom.json
        language: system
        files: requirements.*\.txt$
        pass_filenames: false
        stages: [pre-push]

# Global configuration
default_stages: [commit]
fail_fast: false
minimum_pre_commit_version: 3.0.0

# CI configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit.com hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: [pytest-check, generate-sbom]  # Skip expensive hooks in CI
  submodules: false