[tool:pytest]
# Pytest configuration for Foresight SAR test suite

# Test discovery
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Test directories
testpaths = tests

# Minimum version
minversion = 6.0

# Add current directory to Python path
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=src
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-fail-under=70
    --durations=10
    --maxfail=5
    -p no:warnings

# Custom markers
markers =
    unit: Unit tests for individual components
    integration: Integration tests for component interactions
    e2e: End-to-end tests for complete workflows
    smoke: Smoke tests for basic functionality
    slow: Tests that take a long time to run
    gpu: Tests that require GPU acceleration
    network: Tests that require network connectivity
    docker: Tests that require Docker
    jetson: Tests specific to NVIDIA Jetson platform
    performance: Performance and benchmark tests
    security: Security-related tests
    api: API endpoint tests
    stream: Video streaming tests
    detection: Object detection tests
    tracking: Object tracking tests
    geolocation: Geolocation tests
    ui: User interface tests
    config: Configuration tests
    data: Data processing tests
    model: Machine learning model tests

# Test timeout (in seconds)
timeout = 300

# Parallel execution
# Uncomment to enable parallel test execution
# addopts = -n auto

# Logging
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Warnings
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::FutureWarning
    error::pytest.PytestUnraisableExceptionWarning

# Test collection
collect_ignore = [
    "setup.py",
    "build",
    "dist",
    ".git",
    ".tox",
    "__pycache__",
    "*.egg-info",
    "node_modules",
    "ui/build",
    "ui/dist"
]

# Doctest options
doctest_optionflags = NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL

# Cache
cache_dir = .pytest_cache

# JUnit XML output for CI/CD
junit_family = xunit2

# Coverage options
[coverage:run]
source = src
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */env/*
    */build/*
    */dist/*
    setup.py
    conftest.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml