# Jetson Dockerfile for Foresight SAR System
# Based on NVIDIA L4T (Linux for Tegra) with JetPack
FROM nvcr.io/nvidia/l4t-pytorch:r35.2.1-pth2.0-py3

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    git \
    curl \
    build-essential \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    libgstreamer1.0-0 \
    gstreamer1.0-plugins-base \
    gstreamer1.0-plugins-good \
    gstreamer1.0-plugins-bad \
    gstreamer1.0-plugins-ugly \
    gstreamer1.0-libav \
    python3-pip \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js for web interface
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - \
    && apt-get install -y nodejs

# Copy Jetson-specific requirements
COPY requirements-jetson.txt .

# Install Python dependencies (Jetson-optimized)
RUN pip3 install --no-cache-dir -r requirements-jetson.txt

# Copy application code
COPY . .

# Install minimal web dependencies (skip Electron for Jetson)
RUN cd ui && npm install --production

# Create directories for data and models
RUN mkdir -p data/training data/samples models/cache

# Set environment variables for Jetson optimization
ENV PYTHONPATH=/app
ENV SAR_SERVICE_PORT=8004
ENV ENABLE_GPU=true
ENV ENABLE_TENSORRT=true
ENV CUDA_VISIBLE_DEVICES=0
ENV JETSON_OPTIMIZATION=true

# Expose ports
EXPOSE 8004

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8004/health || exit 1

# Default command
CMD ["python3", "src/backend/main.py"]